{
  "filename": "development-environment-setup.md",
  "__html": "<h2>Development Environment Setup</h2>\n<h4>Preparation</h4>\n<ol>\n<li>\n<p>First, fork the <a href=\"https://github.com/apache/dolphinscheduler\">dolphinscheduler</a> code from the remote repository to your local repository.</p>\n</li>\n<li>\n<p>Install MySQL/PostgreSQL, JDK and MAVEN in your own software development environment.</p>\n</li>\n<li>\n<p>Clone your forked repository to the local file system.</p>\n</li>\n</ol>\n<pre><code class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/apache/dolphinscheduler.git\n</code></pre>\n<ol start=\"4\">\n<li>After finished the clone, go into the project directory and execute the following commands:</li>\n</ol>\n<pre><code class=\"language-bash\">git branch -a <span class=\"hljs-comment\">#check the branch</span>\ngit checkout dev <span class=\"hljs-comment\">#switch to the dev branch</span>\ngit pull <span class=\"hljs-comment\">#sychronize the branch with the remote branch</span>\nmvn -U clean package -Prelease -Dmaven.test.skip=<span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#mvn package</span>\n</code></pre>\n<h4>Install node</h4>\n<ol>\n<li>\n<p>Install nvm<br>\ncurl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh</a> | bash</p>\n</li>\n<li>\n<p>Refresh the environment variables<br>\nsource ~/.bash_profile</p>\n</li>\n<li>\n<p>Install node<br>\nnvm install v12.20.2\nnote: Mac users could install npm through brew: brew install npm</p>\n</li>\n<li>\n<p>Validate the node installation<br>\nnode --version</p>\n</li>\n</ol>\n<h4>Install zookeeper</h4>\n<ol>\n<li>\n<p>Download zookeeper<br>\n<a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz\">https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz</a></p>\n</li>\n<li>\n<p>Copy the zookeeper config file<br>\ncp conf/zoo_sample.cfg conf/zoo.cfg</p>\n</li>\n<li>\n<p>Modify zookepper config<br>\nvi conf/zoo.cfg<br>\ndataDir=./tmp/zookeeper</p>\n</li>\n<li>\n<p>Start/stop zookeeper<br>\n./bin/zkServer.sh start<br>\n./bin/zkServer.sh stop</p>\n</li>\n</ol>\n<h4>Create database</h4>\n<p>Create user, user name: ds_user, password: dolphinscheduler</p>\n<pre><code>mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'%' IDENTIFIED BY 'dolphinscheduler';\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'localhost' IDENTIFIED BY 'dolphinscheduler';\nmysql&gt; flush privileges;\n</code></pre>\n<h4>Set up the front-end</h4>\n<ol>\n<li>\n<p>Enter the dolphinscheduler-ui directory<br>\ncd dolphinscheduler-ui</p>\n</li>\n<li>\n<p>Run npm install</p>\n</li>\n</ol>\n<h4>Set up the back-end</h4>\n<ol>\n<li>\n<p>Import the project to IDEA<br>\nfile--&gt;open</p>\n</li>\n<li>\n<p>Modify the database configuration in the datasource.properties file in the resource directory of the dao module</p>\n</li>\n</ol>\n<pre><code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8\nspring.datasource.username=ds_user\nspring.datasource.password=dolphinscheduler\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>Modify pom.xml in the root directory and modify the scope of mysql-connector-java to compile</p>\n</li>\n<li>\n<p>Refresh the dao module, run the main method of org.apache.dolphinscheduler.dao.upgrade.shell.CreateDolphinScheduler to automatically insert the tables and data required by the project.</p>\n</li>\n<li>\n<p>Modify the service module\ntry to change the zookeeper.quorum part of the zookeeper.properties file\nzookeeper.quorum=localhost:2181</p>\n</li>\n</ol>\n<h4>Start the project</h4>\n<ol>\n<li>\n<p>Start zookeeper<br>\n./bin/zkServer.sh start</p>\n</li>\n<li>\n<p>Start MasterServer<br>\nrun the main method of org.apache.dolphinscheduler.server.master.MasterServer, you need to set the following VM options:</p>\n</li>\n</ol>\n<pre><code>-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<ol start=\"3\">\n<li>Start WorkerServer<br>\nrun the main method of org.apache.dolphinscheduler.server.worker.WorkerServer, you need to set the following VM options:</li>\n</ol>\n<pre><code>-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<ol start=\"4\">\n<li>Start ApiApplicationServer<br>\nrun the main method of org.apache.dolphinscheduler.api.ApiApplicationServer, you need to set the following VM options:</li>\n</ol>\n<pre><code>-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api\n</code></pre>\n<ol start=\"5\">\n<li>We are not going to start the other modules. if they are required to be started, check script/dolphinscheduler-daemon.sh and set them the same VM Options.</li>\n</ol>\n<pre><code>if [ &quot;$command&quot; = &quot;api-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api&quot;\n  CLASS=org.apache.dolphinscheduler.api.ApiApplicationServer\nelif [ &quot;$command&quot; = &quot;master-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false&quot;\n  CLASS=org.apache.dolphinscheduler.server.master.MasterServer\nelif [ &quot;$command&quot; = &quot;worker-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false&quot;\n  CLASS=org.apache.dolphinscheduler.server.worker.WorkerServer\nelif [ &quot;$command&quot; = &quot;alert-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogback.configurationFile=conf/logback-alert.xml&quot;\n  CLASS=org.apache.dolphinscheduler.alert.AlertServer\nelif [ &quot;$command&quot; = &quot;logger-server&quot; ]; then\n  CLASS=org.apache.dolphinscheduler.server.log.LoggerServer\nelse\n  echo &quot;Error: No command named '$command' was found.&quot;\n  exit 1\nfi\n</code></pre>\n<ol start=\"6\">\n<li>Start web ui</li>\n</ol>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> dolphinscheduler-ui\nnpm run start\n</code></pre>\n<h4>Visit the project</h4>\n<ol>\n<li>\n<p>Visit <a href=\"http://localhost:8888\">http://localhost:8888</a></p>\n</li>\n<li>\n<p>Sign in with the administrator account<br>\nusername: admin<br>\npassword: dolphinscheduler123</p>\n</li>\n</ol>\n",
  "link": "/dist/en-us/development/development-environment-setup.html",
  "meta": {}
}