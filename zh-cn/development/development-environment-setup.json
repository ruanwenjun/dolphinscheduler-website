{
  "filename": "development-environment-setup.md",
  "__html": "<h2>环境搭建</h2>\n<p>如果您对本地开发的视频教程感兴趣的话，也可以跟着视频来一步一步操作:\n<a href=\"https://www.bilibili.com/video/BV1hf4y1b7sX\"><img src=\"/img/build_dev_video.png\" alt=\" DolphinScheduler 本地开发搭建 \"></a></p>\n<h4>准备工作</h4>\n<ol>\n<li>\n<p>首先从远端仓库 fork <a href=\"https://github.com/apache/dolphinscheduler\">dolphinscheduler</a> 一份代码到自己的仓库中</p>\n</li>\n<li>\n<p>在开发环境中安装好 MySQL/PostgreSQL、JDK、MAVEN</p>\n</li>\n<li>\n<p>把自己仓库 clone 到本地</p>\n</li>\n</ol>\n<pre><code class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/apache/dolphinscheduler.git\n</code></pre>\n<ol start=\"4\">\n<li>git clone 项目后，进入项目目录，执行以下命令</li>\n</ol>\n<pre><code class=\"language-bash\">1. git branch -a <span class=\"hljs-comment\">#查看分支</span>\n2. git checkout dev <span class=\"hljs-comment\">#切换到dev分支</span>\n3. git pull <span class=\"hljs-comment\">#同步分支</span>\n4. mvn -U clean package -Prelease -Dmaven.test.skip=<span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#mvn打包</span>\n</code></pre>\n<h4>安装node</h4>\n<ol>\n<li>\n<p>安装nvm<br>\ncurl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh</a> | bash</p>\n</li>\n<li>\n<p>刷新环境变量<br>\nsource ~/.bash_profile</p>\n</li>\n<li>\n<p>安装node<br>\nnvm install v12.20.2\n备注: Mac用户还可以通过brew安装npm: brew install npm</p>\n</li>\n<li>\n<p>验证node安装成功<br>\nnode --version</p>\n</li>\n</ol>\n<h4>安装 zookeeper</h4>\n<ol>\n<li>\n<p>下载 zookeeper<br>\n<a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz\">https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz</a></p>\n</li>\n<li>\n<p>复制配置文件<br>\ncp conf/zoo_sample.cfg conf/zoo.cfg</p>\n</li>\n<li>\n<p>修改配置<br>\nvi conf/zoo.cfg<br>\ndataDir=./tmp/zookeeper</p>\n</li>\n<li>\n<p>启动/停止 zookeeper<br>\n./bin/zkServer.sh start\n./bin/zkServer.sh stop</p>\n</li>\n</ol>\n<h4>创建数据库</h4>\n<ol>\n<li>创建用户名为 ds_user，密码为 dolphinscheduler 的用户</li>\n</ol>\n<pre><code>mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'%' IDENTIFIED BY 'dolphinscheduler';\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'localhost' IDENTIFIED BY 'dolphinscheduler';\nmysql&gt; flush privileges;\n</code></pre>\n<h4>搭建前端</h4>\n<ol>\n<li>\n<p>进入 dolphinscheduler-ui 的目录<br>\ncd dolphinscheduler-ui</p>\n</li>\n<li>\n<p>执行 npm install</p>\n</li>\n</ol>\n<h4>搭建后端</h4>\n<ol>\n<li>\n<p>将项目导入到 idea 中<br>\nfile--&gt;open</p>\n</li>\n<li>\n<p>修改 dao 模块 resource 目录下 datasource.properties 文件中的数据库配置信息</p>\n</li>\n</ol>\n<pre><code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8\nspring.datasource.username=ds_user\nspring.datasource.password=dolphinscheduler\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>修改根项目中 pom.xml，将 mysql-connector-java 依赖的 scope 修改为 compile</p>\n</li>\n<li>\n<p>刷新 dao 模块，运行 org.apache.dolphinscheduler.dao.upgrade.shell.CreateDolphinScheduler 的 main 方法，自动插入项目所需的表和数据</p>\n</li>\n<li>\n<p>修改 service 模块 zookeeper.properties 中 quorum 配置\nzookeeper.quorum=localhost:2181</p>\n</li>\n</ol>\n<h4>启动项目</h4>\n<ol>\n<li>\n<p>启动 zookeeper<br>\n./bin/zkServer.sh start</p>\n</li>\n<li>\n<p>启动 MasterServer，执行 org.apache.dolphinscheduler.server.master.MasterServer 的 main 方法，需要设置 VM Options:</p>\n</li>\n</ol>\n<pre><code>-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<ol start=\"3\">\n<li>启动WorkerServer，执行org.apache.dolphinscheduler.server.worker.WorkerServer的 main方法，需要设置 VM Options:</li>\n</ol>\n<pre><code>-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<ol start=\"4\">\n<li>启动 ApiApplicationServer，执行 org.apache.dolphinscheduler.api.ApiApplicationServer 的 main 方法，需要设置 VM Options:</li>\n</ol>\n<pre><code>-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api\n</code></pre>\n<ol start=\"5\">\n<li>这里暂时不启动其它模块，如果启动其它模块，那么去查询script/dolphinscheduler-daemon.sh文件，设置相应的 VM Options</li>\n</ol>\n<pre><code>if [ &quot;$command&quot; = &quot;api-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api&quot;\n  CLASS=org.apache.dolphinscheduler.api.ApiApplicationServer\nelif [ &quot;$command&quot; = &quot;master-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false&quot;\n  CLASS=org.apache.dolphinscheduler.server.master.MasterServer\nelif [ &quot;$command&quot; = &quot;worker-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false&quot;\n  CLASS=org.apache.dolphinscheduler.server.worker.WorkerServer\nelif [ &quot;$command&quot; = &quot;alert-server&quot; ]; then\n  LOG_FILE=&quot;-Dlogback.configurationFile=conf/logback-alert.xml&quot;\n  CLASS=org.apache.dolphinscheduler.alert.AlertServer\nelif [ &quot;$command&quot; = &quot;logger-server&quot; ]; then\n  CLASS=org.apache.dolphinscheduler.server.log.LoggerServer\nelse\n  echo &quot;Error: No command named '$command' was found.&quot;\n  exit 1\nfi\n</code></pre>\n<ol start=\"6\">\n<li>启动前端 ui 模块</li>\n</ol>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> dolphinscheduler-ui\nnpm run start\n</code></pre>\n<h4>访问项目</h4>\n<ol>\n<li>\n<p>访问 <a href=\"http://localhost:8888\">http://localhost:8888</a></p>\n</li>\n<li>\n<p>登录管理员账号<br>\n用户: admin<br>\n密码: dolphinscheduler123</p>\n</li>\n</ol>\n",
  "link": "/dist/zh-cn/development/development-environment-setup.html",
  "meta": {}
}